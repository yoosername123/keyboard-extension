<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="vBb#B[p4QaW]i.U/:tTk" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="b9Be1Z)zp?4;riIxn%BP" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace keyboard {" line1="    //% blockId=keyboarddisplaykeyboard" line2="    //% block=&quot;Show Keyboard&quot;" line3="    //% color=&quot;#51e879&quot;" line4="    export function displayKeyboard() : string {" line5="        let keyboardCursor: game.LedSprite = null" line6="        let keyboardReturnValue = &quot;&quot;" line7="        let Row1: string[] = []" line8="        let Row2: string[] = []" line9="        let Row3: string[] = []" line10="        let Row4: string[] = []" line11="        let Row5: string[] = []" line12="        keyboardCursor = game.createSprite(0, 0)" line13="        keyboardReturnValue = &quot;&quot;" line14="        Row1 = [" line15="            &quot;A&quot;," line16="            &quot;B&quot;," line17="            &quot;C&quot;," line18="            &quot;D&quot;," line19="            &quot;E&quot;" line20="        ]" line21="        Row2 = [" line22="            &quot;F&quot;," line23="            &quot;G&quot;," line24="            &quot;H&quot;," line25="            &quot;I&quot;," line26="            &quot;K&quot;" line27="        ]" line28="        Row3 = [" line29="            &quot;L&quot;," line30="            &quot;M&quot;," line31="            &quot;N&quot;," line32="            &quot;O&quot;," line33="            &quot;P&quot;" line34="        ]" line35="        Row4 = [" line36="            &quot;Q&quot;," line37="            &quot;R&quot;," line38="            &quot;S&quot;," line39="            &quot;T&quot;," line40="            &quot;U&quot;" line41="        ]" line42="        Row5 = [" line43="            &quot;V&quot;," line44="            &quot;W&quot;," line45="            &quot;X&quot;," line46="            &quot;Y&quot;," line47="            &quot;Z&quot;" line48="        ]" line49="        while (true) {" line50="            if (input.isGesture(Gesture.LogoDown)) {" line51="                keyboardCursor.change(LedSpriteProperty.Y, -1)" line52="                basic.pause(200)" line53="            } else if (input.isGesture(Gesture.LogoUp)) {" line54="                keyboardCursor.change(LedSpriteProperty.Y, 1)" line55="                basic.pause(200)" line56="            } else if (input.isGesture(Gesture.TiltLeft)) {" line57="                keyboardCursor.change(LedSpriteProperty.X, -1)" line58="                basic.pause(200)" line59="            } else if (input.isGesture(Gesture.TiltRight)) {" line60="                keyboardCursor.change(LedSpriteProperty.X, 1)" line61="                basic.pause(200)" line62="            }" line63="            if (input.buttonIsPressed(Button.AB)) {" line64="                break;" line65="            }" line66="            if (input.buttonIsPressed(Button.A)) {" line67="                if (keyboardCursor.get(LedSpriteProperty.X) == 0) {" line68="                    keyboardReturnValue = &quot;&quot; + keyboardReturnValue + Row1[keyboardCursor.get(LedSpriteProperty.Y)]" line69="                } else if (keyboardCursor.get(LedSpriteProperty.X) == 1) {" line70="                    keyboardReturnValue = &quot;&quot; + keyboardReturnValue + Row2[keyboardCursor.get(LedSpriteProperty.Y)]" line71="                } else if (keyboardCursor.get(LedSpriteProperty.X) == 2) {" line72="                    keyboardReturnValue = &quot;&quot; + keyboardReturnValue + Row3[keyboardCursor.get(LedSpriteProperty.Y)]" line73="                } else if (keyboardCursor.get(LedSpriteProperty.X) == 3) {" line74="                    keyboardReturnValue = &quot;&quot; + keyboardReturnValue + Row4[keyboardCursor.get(LedSpriteProperty.Y)]" line75="                } else if (keyboardCursor.get(LedSpriteProperty.X) == 4) {" line76="                    keyboardReturnValue = &quot;&quot; + keyboardReturnValue + Row5[keyboardCursor.get(LedSpriteProperty.Y)]" line77="                }" line78="                basic.pause(100)" line79="            }" line80="        }" line81="        keyboardCursor.delete()" line82="        return keyboardReturnValue" line83="    }" line84="" line85="}" numlines="86"></mutation></block></statement></block></xml>