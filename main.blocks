<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="MEs^(aW7Y2*gfbXZGOcW" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="vD|Fg{9WL;4juzWu1C~T" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace keyboard {" line1="    //% blockId=keyboarddisplaykeyboard" line2="    //% block=&quot;Show Keyboard&quot;" line3="    //% color=&quot;#51e879&quot;" line4="    export function displayKeyboard() : string {" line5="        let keyboardCursor: game.LedSprite = null" line6="        let keyboardReturnValue = &quot;&quot;" line7="        let Row1: string[] = []" line8="        let Row2: string[] = []" line9="        let Row3: string[] = []" line10="        let Row4: string[] = []" line11="        let Row5: string[] = []" line12="        keyboardCursor = game.createSprite(0, 0)" line13="        Row1 = [" line14="            &quot;A&quot;," line15="            &quot;B&quot;," line16="            &quot;C&quot;," line17="            &quot;D&quot;," line18="            &quot;E&quot;" line19="        ]" line20="        Row2 = [" line21="            &quot;F&quot;," line22="            &quot;G&quot;," line23="            &quot;H&quot;," line24="            &quot;I&quot;," line25="            &quot;K&quot;" line26="        ]" line27="        Row3 = [" line28="            &quot;L&quot;," line29="            &quot;M&quot;," line30="            &quot;N&quot;," line31="            &quot;O&quot;," line32="            &quot;P&quot;" line33="        ]" line34="        Row4 = [" line35="            &quot;Q&quot;," line36="            &quot;R&quot;," line37="            &quot;S&quot;," line38="            &quot;T&quot;," line39="            &quot;U&quot;" line40="        ]" line41="        Row5 = [" line42="            &quot;V&quot;," line43="            &quot;W&quot;," line44="            &quot;X&quot;," line45="            &quot;Y&quot;," line46="            &quot;Z&quot;" line47="        ]" line48="        while (true) {" line49="            if (input.isGesture(Gesture.LogoDown)) {" line50="                keyboardCursor.change(LedSpriteProperty.Y, -1)" line51="                basic.pause(200)" line52="            } else if (input.isGesture(Gesture.LogoUp)) {" line53="                keyboardCursor.change(LedSpriteProperty.Y, 1)" line54="                basic.pause(200)" line55="            } else if (input.isGesture(Gesture.TiltLeft)) {" line56="                keyboardCursor.change(LedSpriteProperty.X, -1)" line57="                basic.pause(200)" line58="            } else if (input.isGesture(Gesture.TiltRight)) {" line59="                keyboardCursor.change(LedSpriteProperty.X, 1)" line60="                basic.pause(200)" line61="            }" line62="            if (input.buttonIsPressed(Button.AB)) {" line63="                break;" line64="            }" line65="            if (input.buttonIsPressed(Button.A)) {" line66="                if (keyboardCursor.get(LedSpriteProperty.X) == 0) {" line67="                    keyboardReturnValue = &quot;&quot; + keyboardReturnValue + Row1[keyboardCursor.get(LedSpriteProperty.Y)]" line68="                } else if (keyboardCursor.get(LedSpriteProperty.X) == 1) {" line69="                    keyboardReturnValue = &quot;&quot; + keyboardReturnValue + Row2[keyboardCursor.get(LedSpriteProperty.Y)]" line70="                } else if (keyboardCursor.get(LedSpriteProperty.X) == 2) {" line71="                    keyboardReturnValue = &quot;&quot; + keyboardReturnValue + Row3[keyboardCursor.get(LedSpriteProperty.Y)]" line72="                } else if (keyboardCursor.get(LedSpriteProperty.X) == 3) {" line73="                    keyboardReturnValue = &quot;&quot; + keyboardReturnValue + Row4[keyboardCursor.get(LedSpriteProperty.Y)]" line74="                } else if (keyboardCursor.get(LedSpriteProperty.X) == 4) {" line75="                    keyboardReturnValue = &quot;&quot; + keyboardReturnValue + Row5[keyboardCursor.get(LedSpriteProperty.Y)]" line76="                }" line77="                basic.pause(100)" line78="            }" line79="        }" line80="        keyboardCursor.delete()" line81="        return keyboardReturnValue" line82="    }" line83="    " line84="    //% blockId=keyboarddisplaynumpad" line85="    //% block=&quot;Show Numpad&quot;" line86="    //% color=&quot;#51e879&quot;" line87="    export function displayNumpad() : number {" line88="        let numpadCursor: game.LedSprite = null" line89="        let numpadReturnValue = &quot;&quot;" line90="        let Row12: number[] = []" line91="        let Row22: number[] = []" line92="        numpadCursor = game.createSprite(0, 0);" line93="        Row12 = [" line94="            1," line95="            2," line96="            3," line97="            4," line98="            5" line99="        ]" line100="        Row22 = [" line101="            6," line102="            7," line103="            8," line104="            9," line105="            0" line106="        ]" line107="        while (true) {" line108="            if (input.isGesture(Gesture.LogoDown)) {" line109="                numpadCursor.change(LedSpriteProperty.Y, -1)" line110="                basic.pause(200)" line111="            } else if (input.isGesture(Gesture.LogoUp)) {" line112="                numpadCursor.change(LedSpriteProperty.Y, 1)" line113="                basic.pause(200)" line114="            } else if (input.isGesture(Gesture.TiltLeft)) {" line115="                numpadCursor.change(LedSpriteProperty.X, -1)" line116="                basic.pause(200)" line117="            } else if (input.isGesture(Gesture.TiltRight)) {" line118="                numpadCursor.change(LedSpriteProperty.X, 1)" line119="                basic.pause(200)" line120="            }" line121="            if (input.buttonIsPressed(Button.AB)) {" line122="                break;" line123="            }" line124="            if (input.buttonIsPressed(Button.A)) {" line125="                if (numpadCursor.get(LedSpriteProperty.X) == 0) {" line126="                    numpadReturnValue = numpadReturnValue + Row12[numpadCursor.get(LedSpriteProperty.Y)]" line127="                } else if (numpadCursor.get(LedSpriteProperty.X) == 1) {" line128="                    numpadReturnValue = numpadReturnValue + Row22[numpadCursor.get(LedSpriteProperty.Y)]" line129="                }" line130="                }" line131="                basic.pause(100)" line132="            }" line133="        " line134="        numpadCursor.delete()" line135="        return parseInt(numpadReturnValue)" line136="    }" line137="}" numlines="138"></mutation></block></statement></block></xml>