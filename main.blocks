<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="|HED$n{qgh^pw8yJEN.`" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="t~v_12`_?prfoYUk%NNL" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace keyboard {" line1="    //% blockId=keyboarddisplaykeyboard" line2="    //% block=&quot;Show Keyboard&quot;" line3="    //% color=&quot;#51e879&quot;" line4="    export function displayKeyboard(limit?:number) : string {" line5="        let keyboardCursor: game.LedSprite = null" line6="        let keyboardReturnValue = &quot;&quot;" line7="        let Row1: string[] = []" line8="        let Row2: string[] = []" line9="        let Row3: string[] = []" line10="        let Row4: string[] = []" line11="        let Row5: string[] = []" line12="        keyboardCursor = game.createSprite(0, 0)" line13="        Row1 = [" line14="            &quot;A&quot;," line15="            &quot;B&quot;," line16="            &quot;C&quot;," line17="            &quot;D&quot;," line18="            &quot;E&quot;" line19="        ]" line20="        Row2 = [" line21="            &quot;F&quot;," line22="            &quot;G&quot;," line23="            &quot;H&quot;," line24="            &quot;I&quot;," line25="            &quot;K&quot;" line26="        ]" line27="        Row3 = [" line28="            &quot;L&quot;," line29="            &quot;M&quot;," line30="            &quot;N&quot;," line31="            &quot;O&quot;," line32="            &quot;P&quot;" line33="        ]" line34="        Row4 = [" line35="            &quot;Q&quot;," line36="            &quot;R&quot;," line37="            &quot;S&quot;," line38="            &quot;T&quot;," line39="            &quot;U&quot;" line40="        ]" line41="        Row5 = [" line42="            &quot;V&quot;," line43="            &quot;W&quot;," line44="            &quot;X&quot;," line45="            &quot;Y&quot;," line46="            &quot;Z&quot;" line47="        ]" line48="        while (true) {" line49="            if (input.isGesture(Gesture.LogoDown)) {" line50="                keyboardCursor.change(LedSpriteProperty.Y, -1)" line51="                basic.pause(200)" line52="            } else if (input.isGesture(Gesture.LogoUp)) {" line53="                keyboardCursor.change(LedSpriteProperty.Y, 1)" line54="                basic.pause(200)" line55="            } else if (input.isGesture(Gesture.TiltLeft)) {" line56="                keyboardCursor.change(LedSpriteProperty.X, -1)" line57="                basic.pause(200)" line58="            } else if (input.isGesture(Gesture.TiltRight)) {" line59="                keyboardCursor.change(LedSpriteProperty.X, 1)" line60="                basic.pause(200)" line61="            }" line62="            if (input.buttonIsPressed(Button.AB)) {" line63="                if (keyboardReturnValue.length &lt;= limit) {" line64="                    break;" line65="                }" line66="                " line67="            }" line68="            if (input.buttonIsPressed(Button.A)) {" line69="                if (keyboardCursor.get(LedSpriteProperty.X) == 0) {" line70="                    if (keyboardReturnValue.length &lt; limit) {" line71="                    keyboardReturnValue = &quot;&quot; + keyboardReturnValue + Row1[keyboardCursor.get(LedSpriteProperty.Y)]}" line72="                } else if (keyboardCursor.get(LedSpriteProperty.X) == 1) {" line73="                    if (keyboardReturnValue.length &lt; limit) {" line74="                    keyboardReturnValue = &quot;&quot; + keyboardReturnValue + Row2[keyboardCursor.get(LedSpriteProperty.Y)]}" line75="                } else if (keyboardCursor.get(LedSpriteProperty.X) == 2) {" line76="                    if (keyboardReturnValue.length &lt; limit) {" line77="                    keyboardReturnValue = &quot;&quot; + keyboardReturnValue + Row3[keyboardCursor.get(LedSpriteProperty.Y)]}" line78="                } else if (keyboardCursor.get(LedSpriteProperty.X) == 3) {" line79="                    if (keyboardReturnValue.length &lt; limit) {" line80="                    keyboardReturnValue = &quot;&quot; + keyboardReturnValue + Row4[keyboardCursor.get(LedSpriteProperty.Y)]}" line81="                } else if (keyboardCursor.get(LedSpriteProperty.X) == 4) {" line82="                    if (limit !== undefined) {" line83="                    if (keyboardReturnValue.length &lt; limit) {" line84="                    keyboardReturnValue = &quot;&quot; + keyboardReturnValue + Row5[keyboardCursor.get(LedSpriteProperty.Y)]}}" line85="                }" line86="                basic.pause(100)" line87="            }" line88="        }" line89="        keyboardCursor.delete()" line90="        return keyboardReturnValue" line91="    }" line92="    " line93="    //% blockId=keyboarddisplaynumpad" line94="    //% block=&quot;Show Numpad&quot;" line95="    //% color=&quot;#51e879&quot;" line96="    export function displayNumpad() : number {" line97="        let numpadCursor: game.LedSprite = null" line98="        let numpadReturnValue = &quot;&quot;" line99="        let Row12: number[] = []" line100="        let Row22: number[] = []" line101="        numpadCursor = game.createSprite(0, 0);" line102="        Row12 = [" line103="            1," line104="            2," line105="            3," line106="            4," line107="            5" line108="        ]" line109="        Row22 = [" line110="            6," line111="            7," line112="            8," line113="            9," line114="            0" line115="        ]" line116="        while (true) {" line117="            if (input.isGesture(Gesture.LogoDown)) {" line118="                numpadCursor.change(LedSpriteProperty.Y, -1)" line119="                basic.pause(200)" line120="            } else if (input.isGesture(Gesture.LogoUp)) {" line121="                numpadCursor.change(LedSpriteProperty.Y, 1)" line122="                basic.pause(200)" line123="            } else if (input.isGesture(Gesture.TiltLeft)) {" line124="                numpadCursor.change(LedSpriteProperty.X, -1)" line125="                basic.pause(200)" line126="            } else if (input.isGesture(Gesture.TiltRight)) {" line127="                numpadCursor.change(LedSpriteProperty.X, 1)" line128="                basic.pause(200)" line129="            }" line130="            if (input.buttonIsPressed(Button.AB)) {" line131="                break;" line132="            }" line133="            if (input.buttonIsPressed(Button.A)) {" line134="                if (numpadCursor.get(LedSpriteProperty.X) == 0) {" line135="                    numpadReturnValue = numpadReturnValue + Row12[numpadCursor.get(LedSpriteProperty.Y)]" line136="                } else if (numpadCursor.get(LedSpriteProperty.X) == 1) {" line137="                    numpadReturnValue = numpadReturnValue + Row22[numpadCursor.get(LedSpriteProperty.Y)]" line138="                }" line139="                }" line140="                basic.pause(100)" line141="            }" line142="        " line143="        numpadCursor.delete()" line144="        return parseInt(numpadReturnValue)" line145="    }" line146="}" numlines="147"></mutation></block></statement></block></xml>