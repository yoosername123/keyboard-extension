<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="o1G172pHe8mwc$KD4pG^" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="~5$P#D#?E7[55jC{[s!0" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace keyboard {" line1="    export function displayKeyboard() : string {" line2="        let keyboardCursor: game.LedSprite = null" line3="        let keyboardReturnValue = &quot;&quot;" line4="        let Row1: string[] = []" line5="        let Row2: string[] = []" line6="        let Row3: string[] = []" line7="        let Row4: string[] = []" line8="        let Row5: string[] = []" line9="        keyboardCursor = game.createSprite(0, 0)" line10="        keyboardReturnValue = &quot;&quot;" line11="        Row1 = [" line12="            &quot;A&quot;," line13="            &quot;B&quot;," line14="            &quot;C&quot;," line15="            &quot;D&quot;," line16="            &quot;E&quot;" line17="        ]" line18="        Row2 = [" line19="            &quot;F&quot;," line20="            &quot;G&quot;," line21="            &quot;H&quot;," line22="            &quot;I&quot;," line23="            &quot;K&quot;" line24="        ]" line25="        Row3 = [" line26="            &quot;L&quot;," line27="            &quot;M&quot;," line28="            &quot;N&quot;," line29="            &quot;O&quot;," line30="            &quot;P&quot;" line31="        ]" line32="        Row4 = [" line33="            &quot;Q&quot;," line34="            &quot;R&quot;," line35="            &quot;S&quot;," line36="            &quot;T&quot;," line37="            &quot;U&quot;" line38="        ]" line39="        Row5 = [" line40="            &quot;V&quot;," line41="            &quot;W&quot;," line42="            &quot;X&quot;," line43="            &quot;Y&quot;," line44="            &quot;Z&quot;" line45="        ]" line46="        while (true) {" line47="            if (input.isGesture(Gesture.LogoDown)) {" line48="                keyboardCursor.change(LedSpriteProperty.Y, -1)" line49="                basic.pause(200)" line50="            } else if (input.isGesture(Gesture.LogoUp)) {" line51="                keyboardCursor.change(LedSpriteProperty.Y, 1)" line52="                basic.pause(200)" line53="            } else if (input.isGesture(Gesture.TiltLeft)) {" line54="                keyboardCursor.change(LedSpriteProperty.X, -1)" line55="                basic.pause(200)" line56="            } else if (input.isGesture(Gesture.TiltRight)) {" line57="                keyboardCursor.change(LedSpriteProperty.X, 1)" line58="                basic.pause(200)" line59="            }" line60="            if (input.buttonIsPressed(Button.AB)) {" line61="                break;" line62="            }" line63="            if (input.buttonIsPressed(Button.A)) {" line64="                if (keyboardCursor.get(LedSpriteProperty.X) == 0) {" line65="                    keyboardReturnValue = &quot;&quot; + keyboardReturnValue + Row1[keyboardCursor.get(LedSpriteProperty.Y)]" line66="                } else if (keyboardCursor.get(LedSpriteProperty.X) == 1) {" line67="                    keyboardReturnValue = &quot;&quot; + keyboardReturnValue + Row2[keyboardCursor.get(LedSpriteProperty.Y)]" line68="                } else if (keyboardCursor.get(LedSpriteProperty.X) == 2) {" line69="                    keyboardReturnValue = &quot;&quot; + keyboardReturnValue + Row3[keyboardCursor.get(LedSpriteProperty.Y)]" line70="                } else if (keyboardCursor.get(LedSpriteProperty.X) == 3) {" line71="                    keyboardReturnValue = &quot;&quot; + keyboardReturnValue + Row4[keyboardCursor.get(LedSpriteProperty.Y)]" line72="                } else if (keyboardCursor.get(LedSpriteProperty.X) == 4) {" line73="                    keyboardReturnValue = &quot;&quot; + keyboardReturnValue + Row5[keyboardCursor.get(LedSpriteProperty.Y)]" line74="                }" line75="                basic.pause(100)" line76="            }" line77="        }" line78="        keyboardCursor.delete()" line79="        return keyboardReturnValue" line80="    }" line81="" line82="}" numlines="83"></mutation></block></statement></block></xml>